{"version":3,"sources":["Models/TileModel.js","Models/PlayerModel.js","Models/GameData.js","Components/Tile.js","Components/GameGrid.js","App.js","serviceWorker.js","index.js"],"names":["Tile","type","_this","this","Object","classCallCheck","setContents","newContents","contents","clearContents","PlayerModel","x","y","DISPLAY_CHARACTER","GameData","coordinatesToIndex","movePlayer","index","player","currentMap","Array","MAP_TILES_WIDE","mapWidth","mapHeight","TileModel","MAP_TILES_HIGH","props","possibleConstructorReturn","getPrototypeOf","call","state","tileModel","toLowerCase","VALID_STATES_DISPLAY","Error","react_default","a","createElement","style","background","display","getCharacter","stateData","React","Component","floor","wall","GameGrid","createTiles","rows","data","tiles","push","Components_Tile","key","className","length","handleKeyPress","event","keyPressed","newCoordinates","setState","gameData","id","onKeyPress","tabIndex","color","fontFamily","fontSize","width","App","Components_GameGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8de6cf3b.chunk.js","sourcesContent":["// Should probably rename this to something other than \"tile\"\r\nclass Tile {\r\n    constructor(type) {\r\n        this.type = type; // empty, wall, etc.\r\n        this.contents = null; // just one item\r\n    }\r\n\r\n    setContents = (newContents) => {\r\n        this.contents = newContents;\r\n    }\r\n\r\n    clearContents = () => {\r\n        this.setContents(null);\r\n    }\r\n}\r\n\r\nexport default Tile;\r\n","class PlayerModel {\r\n    DISPLAY_CHARACTER = '@';\r\n    \r\n    x = 0;\r\n    y = 0;\r\n\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nexport default PlayerModel;","/// All the data we need for our game, eg. the current board, player, etc.\r\n// Not just that, but \"controller\" methods to manipulate that data. :think:\r\nimport TileModel from './TileModel';\r\nimport PlayerModel from './PlayerModel';\r\n\r\nconst MAP_TILES_WIDE = 50\r\nconst MAP_TILES_HIGH = 16\r\n\r\nclass GameData {\r\n    constructor() {\r\n\r\n        this.currentMap = Array(MAP_TILES_WIDE * MAP_TILES_HIGH);\r\n        this.mapWidth = MAP_TILES_WIDE;\r\n        this.mapHeight = MAP_TILES_HIGH;\r\n\r\n        this.player = new PlayerModel(this.mapWidth / 2, this.mapHeight / 2);        \r\n        \r\n        for (let y = 0; y < MAP_TILES_HIGH; y++) {\r\n            for (let x = 0; x < MAP_TILES_WIDE; x++) {\r\n                var index = this.coordinatesToIndex(x, y);\r\n                if (x === 0 || y === 0 || x === MAP_TILES_WIDE - 1 || y === MAP_TILES_HIGH - 1) {\r\n                    this.currentMap[index] = new TileModel(\"wall\");\r\n                } else {\r\n                    this.currentMap[index] = new TileModel(\"floor\");\r\n                }\r\n            }\r\n        }\r\n\r\n        var playerTile = this.currentMap[(this.player.y * MAP_TILES_WIDE) + this.player.x];\r\n        playerTile.contents = this.player;\r\n    }\r\n\r\n    coordinatesToIndex = (x, y) => {\r\n        return (y * MAP_TILES_WIDE) + x;\r\n    }\r\n\r\n    // Controller method\r\n    movePlayer = (x, y) => {\r\n        var index = this.coordinatesToIndex(this.player.x, this.player.y);\r\n        var previousTile = this.currentMap[index];\r\n        previousTile.clearContents();\r\n        \r\n        this.player.x = x;\r\n        this.player.y = y;\r\n        index = this.coordinatesToIndex(x, y);\r\n        var currentTile = this.currentMap[index];\r\n        currentTile.setContents(this.player);\r\n    }\r\n}\r\n\r\nexport default GameData;","import React from 'react';\r\n\r\nclass Tile extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // x, y coordinates just make it easier to debug\r\n        this.state = {\"x\": props.x, \"y\": props.y, \"contents\": \"empty\"};\r\n\r\n        if (\"contents\" in props) {\r\n            // \"Contents\" is an instance of TileModel\r\n            var tileModel = this.props[\"contents\"];\r\n            var type = tileModel.type.toLowerCase();\r\n            if (type in Tile.VALID_STATES_DISPLAY) {\r\n                this.state[\"data\"] = tileModel;\r\n            } else {\r\n                throw new Error(\"Invalid tile type: \" + type);\r\n            }            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div style={{background: \"#222\", display: \"inline\"}}>{this.getCharacter()}</div>;\r\n    }\r\n\r\n    getCharacter() {\r\n        var stateData = this.state[\"data\"];\r\n        if (stateData.contents != null) {\r\n            return stateData.contents.DISPLAY_CHARACTER;\r\n        } else {\r\n            return Tile.VALID_STATES_DISPLAY[stateData.type];\r\n        }\r\n    }\r\n}\r\n\r\n// Valid contents, and what they display as\r\nTile.VALID_STATES_DISPLAY = {\r\n    \"floor\": '.',\r\n    \"wall\": '#'\r\n}\r\n\r\n\r\nexport default Tile;","import React from 'react';\r\nimport Tile from './Tile';\r\n\r\nclass GameGrid extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\"gameData\": props.gameData};\r\n    }\r\n\r\n    createTiles = () => {\r\n        let rows = []\r\n        var data = this.state[\"gameData\"];\r\n\r\n        // Outer loop to create parent\r\n        for (let y = 0; y < data.mapHeight; y++) {\r\n            let tiles = []\r\n            //Inner loop to create children\r\n            for (let x = 0; x < data.mapWidth; x++) {\r\n                tiles.push(<Tile x={x} y={y} contents={data.currentMap[y * data.mapWidth + x]} key={\"tile\" + x + \"-\" + y} />)\r\n            }\r\n            //Create the parent and add the children\r\n            rows.push(<div className=\"row\" key={\"row\" + rows.length}>{tiles}</div>)\r\n        }\r\n        return rows\r\n    }\r\n\r\n    render() {\r\n        return(\r\n             // https://stackoverflow.com/questions/3149362/capture-key-press-or-keydown-event-on-div-element\r\n            <div id=\"playerController\" onKeyPress={this.handleKeyPress} tabIndex=\"0\">\r\n                <div id=\"grid\" style={{background: \"#222\", color: \"white\", fontFamily: 'Roboto Mono, monospace', fontSize: \"18px\", width: 450}}>\r\n                    {this.createTiles()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleKeyPress = (event) => {\r\n        var keyPressed = event.key;\r\n        var player = this.state[\"gameData\"].player;\r\n        var newCoordinates = null; // [x, y]\r\n\r\n        switch (keyPressed) {\r\n            case \"w\":\r\n                newCoordinates = [player.x, player.y - 1];\r\n                break;\r\n            case \"a\":\r\n                newCoordinates = [player.x - 1, player.y];\r\n                break;\r\n            case \"s\":\r\n                newCoordinates = [player.x, player.y + 1];\r\n                break;\r\n            case \"d\": \r\n                newCoordinates = [player.x + 1, player.y];\r\n                break;\r\n            default:\r\n                // do nothing.\r\n        }\r\n\r\n        if (newCoordinates != null) {\r\n            this.state[\"gameData\"].movePlayer(newCoordinates[0], newCoordinates[1]);\r\n            this.setState({\"gameData\": this.state[\"gameData\"]}); // Refresh\r\n        }\r\n    }\r\n}\r\n\r\nexport default GameGrid;","import React, { Component } from 'react';\nimport GameData from './Models/GameData';\n\nimport './App.css';\nimport GameGrid from './Components/GameGrid';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.gameData = new GameData();\n  }\n\n  render() {\n    return (\n      <GameGrid gameData={this.gameData} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}