{"version":3,"sources":["Components/Tile.js","Components/GameGrid.js","Models/TileModel.js","Models/GameData.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","contents","tileModel","type","toLowerCase","VALID_STATES_DISPLAY","Error","react_default","a","createElement","style","background","display","getCharacter","React","Component","floor","wall","GameGrid","createTiles","rows","data","gameData","y","mapHeight","tiles","x","mapWidth","push","Components_Tile","currentMap","key","className","length","id","color","fontFamily","fontSize","width","GameData","Array","MAP_TILES_WIDE","index","TileModel","MAP_TILES_HIGH","App","Components_GameGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEMA,cAEF,SAAAA,EAAYC,GAAO,IAAAC,EAKf,GALeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CAACC,SAAY,SAEtB,aAAcT,EAAO,CAErB,IAAIU,EAAYT,EAAKD,MAAL,SACZW,EAAOD,EAAUC,KAAKC,cAC1B,KAAID,KAAQZ,EAAKc,sBAGb,MAAM,IAAIC,MAAM,sBAAwBH,GAFxCV,EAAKO,MAAL,KAAqBE,EAVd,OAAAT,wEAkBf,OAAOc,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,WAAY,OAAQC,QAAS,WAAYhB,KAAKiB,uDAIlE,OAAOtB,EAAKc,qBAAqBT,KAAKI,MAAL,KAAmBG,aAxBzCW,IAAMC,WA6BzBxB,EAAKc,qBAAuB,CACxBW,MAAS,IACTC,KAAQ,KAIG1B,QCDA2B,cA/BX,SAAAA,EAAY1B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,IACfzB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,KAAMJ,KAIV2B,YAAc,WAKV,IAJA,IAAIC,EAAO,GACPC,EAAO5B,EAAK6B,SAGPC,EAAI,EAAGA,EAAIF,EAAKG,UAAWD,IAAK,CAGrC,IAFA,IAAIE,EAAQ,GAEHC,EAAI,EAAGA,EAAIL,EAAKM,SAAUD,IAC/BD,EAAMG,KAAKrB,EAAAC,EAAAC,cAACoB,EAAD,CAAM5B,SAAUoB,EAAKS,WAAWP,EAAIF,EAAKM,SAAWD,GAAIK,IAAK,OAASL,EAAI,IAAMH,KAG/FH,EAAKQ,KAAKrB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,MAAMD,IAAK,MAAQX,EAAKa,QAASR,IAE9D,OAAOL,GAjBP3B,EAAK6B,SAAW9B,EAAM8B,SAFP7B,wEAuBf,OACIc,EAAAC,EAAAC,cAAA,OAAKyB,GAAG,OAAOxB,MAAO,CAACC,WAAY,OAAQwB,MAAO,QAASC,WAAY,yBAA0BC,SAAU,OAAQC,MAAO,MACrH1C,KAAKuB,sBA3BCL,IAAMC,WCKdxB,EANX,SAAAA,EAAYY,GAAOT,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACfK,KAAKO,KAAOA,EACZP,KAAKK,SAAW,MCqBTsC,EAlBX,SAAAA,IAAe7C,OAAAC,EAAA,EAAAD,CAAAE,KAAA2C,GACX3C,KAAKkC,WAAaU,MAAMC,KACxB7C,KAAK+B,SANU,GAOf/B,KAAK4B,UANU,GAQf,IAAK,IAAID,EAAI,EAAGA,EARD,GAQqBA,IAChC,IAAK,IAAIG,EAAI,EAAGA,EAVL,GAUyBA,IAAK,CACrC,IAAIgB,EAXG,GAWMnB,EAAsBG,EAE/B9B,KAAKkC,WAAWY,GAAS,IAAIC,EADvB,IAANjB,GAAiB,IAANH,GAAiBkB,KAANf,GAAkCkB,KAANrB,EACX,OAEA,WCK5CsB,qBAfb,SAAAA,EAAYrD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiD,IACjBpD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmD,GAAA9C,KAAAH,KAAMJ,KACD8B,SAAW,IAAIiB,EAFH9C,wEAMjB,OAEEc,EAAAC,EAAAC,cAAA,OAAKyB,GAAG,aACN3B,EAAAC,EAAAC,cAACqC,EAAD,CAAUxB,SAAU1B,KAAK0B,mBAXfP,cCMEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d4c7a284.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Tile extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\"contents\": \"empty\"};\r\n\r\n        if (\"contents\" in props) {\r\n            // \"Contents\" is an instance of TileModel\r\n            var tileModel = this.props[\"contents\"];\r\n            var type = tileModel.type.toLowerCase();\r\n            if (type in Tile.VALID_STATES_DISPLAY) {\r\n                this.state[\"data\"] = tileModel;\r\n            } else {\r\n                throw new Error(\"Invalid tile type: \" + type);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div style={{background: \"#222\", display: \"inline\"}}>{this.getCharacter()}</div>;\r\n    }\r\n\r\n    getCharacter() {\r\n        return Tile.VALID_STATES_DISPLAY[this.state[\"data\"].type];\r\n    }\r\n}\r\n\r\n// Valid contents, and what they display as\r\nTile.VALID_STATES_DISPLAY = {\r\n    \"floor\": '.',\r\n    \"wall\": '#'\r\n}\r\n\r\n\r\nexport default Tile;","import React from 'react';\r\nimport Tile from './Tile';\r\n\r\nclass GameGrid extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.gameData = props.gameData;\r\n    }\r\n\r\n    createTiles = () => {\r\n        let rows = []\r\n        var data = this.gameData;\r\n\r\n        // Outer loop to create parent\r\n        for (let y = 0; y < data.mapHeight; y++) {\r\n            let tiles = []\r\n            //Inner loop to create children\r\n            for (let x = 0; x < data.mapWidth; x++) {\r\n                tiles.push(<Tile contents={data.currentMap[y * data.mapWidth + x]} key={\"tile\" + x + \"-\" + y} />)\r\n            }\r\n            //Create the parent and add the children\r\n            rows.push(<div className=\"row\" key={\"row\" + rows.length}>{tiles}</div>)\r\n        }\r\n        return rows\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"grid\" style={{background: \"#222\", color: \"white\", fontFamily: 'Roboto Mono, monospace', fontSize: \"18px\", width: 450}}>\r\n                {this.createTiles()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameGrid;","// Should probably rename this to something other than \"tile\"\r\nclass Tile {\r\n    constructor(type) {\r\n        this.type = type; // empty, wall, etc.\r\n        this.contents = null; // just one item\r\n    }\r\n}\r\n\r\nexport default Tile;\r\n","/// All the data we need for our game, eg. the current board, player, etc.\r\nimport TileModel from './TileModel';\r\n\r\nconst MAP_TILES_WIDE = 50\r\nconst MAP_TILES_HIGH = 16\r\n\r\nclass GameData {\r\n    constructor() {\r\n        this.currentMap = Array(MAP_TILES_WIDE * MAP_TILES_HIGH);\r\n        this.mapWidth = MAP_TILES_WIDE;\r\n        this.mapHeight = MAP_TILES_HIGH;\r\n        \r\n        for (let y = 0; y < MAP_TILES_HIGH; y++) {\r\n            for (let x = 0; x < MAP_TILES_WIDE; x++) {\r\n                var index = (y * MAP_TILES_WIDE) + x;\r\n                if (x === 0 || y === 0 || x === MAP_TILES_WIDE - 1 || y === MAP_TILES_HIGH - 1) {\r\n                    this.currentMap[index] = new TileModel(\"wall\");\r\n                } else {\r\n                    this.currentMap[index] = new TileModel(\"floor\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default GameData;","import React, { Component } from 'react';\nimport GameGrid from './Components/GameGrid';\nimport GameData from './Models/GameData';\n\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.gameData = new GameData();\n  }\n\n  render() {\n    return (\n\n      <div id=\"container\">\n        <GameGrid gameData={this.gameData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}